from odoo import models, fields, api
from odoo.http import request
import qrcode
import base64
from io import BytesIO
from datetime import date, datetime, timedelta

def generate_qr_code(url):
    qr = qrcode.QRCode(
             version=1,
             error_correction=qrcode.constants.ERROR_CORRECT_L,
             box_size=20,
             border=4,
             )
    qr.add_data(url)
    qr.make(fit=True)
    img = qr.make_image()
    temp = BytesIO()
    img.save(temp, format="PNG")
    qr_img = base64.b64encode(temp.getvalue())
    return qr_img

class Prioridad(models.Model):
    _name = 'prioridad.mantenimiento'
    name = fields.Char(size=25, required=True)

class Equipo(models.Model):
    _name        = 'maintenance.equipment'
    _inherit     = 'maintenance.equipment'
    #user_propi   = fields.Many2one('res.users',string="Usuario Propietario ",required=True)
    #propietario  = fields.Many2one('res.partner',string="Propietario",related='user_propi.partner_id')
    propietario  = fields.Many2one('res.partner', string="Propietario", required=True,
                                  domain=[('is_company', '=', 'True')])
    parent_id    = fields.Integer(related='propietario.id')
    ubicacion    = fields.Many2one('res.partner',string="Ubicaciones",required=True)
    fabricante   = fields.Char(size=60)
    marca        = fields.Char(size=60)
    fecha_compra = fields.Date()
    otro1        = fields.Char(size=50,string="Clasificacion 1")
    otro2        = fields.Char(size=50, string = "Clasificacion 2")
    time_uso     = fields.Float(String="Horas Promedio")
    prioridad    = fields.Many2one('prioridad.mantenimiento',string="Prioridad")
    adjunto      = fields.One2many('adjunto.mantenimiento','equipo',string="Archivos Adjuntos")
    planequipo   = fields.One2many('planequipo.mantenimiento','equipo',string="Planes Equipos")
    qr_image     = fields.Binary("QR Code", compute='_generate_qr_code')
    qr_image2    = fields.Binary("QR Code", compute='_generate_qr_code')
    url_qr       = fields.Char(string='URL del QR',compute='_generate_qr_code')
    fecha_prox   = fields.Date(compute='_generate_f_prox')
    fecha_prox   = fields.Date(string="Fecha aprox")
    hoy          = fields.Date(default=str(datetime.now()))
    avisado_prox = fields.Char(compute='_comparar_fechas')
    avisado_prox = fields.Char(string="Avisado aprox")

    fecha_ult    = fields.Date(compute='_generate_f_prox')
    plan         = fields.Char(compute='_generate_f_prox')
    avisado      = fields.Boolean(compute='_comparar_fechas')
    avisado      = fields.Boolean(string="Avisado")
    anticipo     = fields.Integer(compute='_generate_f_prox')
    
    def _generate_qr_code(self):
	#configuracion = self.env['res.config.settings'].get_values()
	#ruta_web = configuracion['ruta_web']
    	configuracion = self.env['res.config.settings'].sudo().get_values()
    	ruta_web = configuracion.get('ruta_web')
    	base_url = ruta_web if ruta_web else 'http://equiposindustriales.pe'
    	base_url += '/web#id=%d&view_type=form&model=%s' % (self.id, self._name)
    	self.qr_image = generate_qr_code(base_url)
    	self.qr_image2 = self.qr_image
    	self.url_qr = base_url

    #'''
    def _generate_f_prox(self):
        for record in self.planequipo:
            if record.fecha_ejecprox:
                self.fecha_prox = str(record.fecha_ejecprox)
                self.fecha_ult = str(record.fecha_ejec)
                self.plan      = record.plan.tipo.name
                self.anticipo  = record.plan.aviso_dias

    @api.depends('hoy')
    def _comparar_fechas(self):
        for record in self:
            if record.fecha_prox != False:
                diff =  record.fecha_prox - record.hoy
                if diff.days <= record.anticipo:
                    record.avisado=True
                    record.avisado_prox='Proximo Mantenimiento'

    def _create_new_activity(self,id):
        print("#" * 100)
        print("self -->", self)
        print("id -->", id)
        self.env['mail.activity'].create({
                'date_deadline':datetime.now(),
                'res_id':id,
                'activity_type_id':3,
                'summary':'Esta Proximo un nuevo mantenimiento',
                'res_model_id':163,
                'user_id':2})

    @api.model
    def _init_act(self):
        c=self.env['maintenance.equipment'].search([('name','!=','##')])
        for record in c:
            self._create_new_activity(record)
    #'''
